1. React.memo
 - 컴포넌트를 인수로 받아, 최적화된 컴포넌트로 만들어 반환
 const memoizedComponent = memo(대상 컴포넌트);
 - props를 기준으로 메모이제이션 된다.
 - 부모가 리렌더링이 되더라도 props의 값이 바뀌지 않으면
 리런더링 되지 않는다.
 
2. props 가 많은 컴포넌트를 최적화 하는 방법
 - 함수들 자체를 메모이제이션해서 리렌더링 되더라도 
 방지하는 방법, 다른 훅을 사용해야한다
 - 인수로 callback함수를 전달해서 기능을 커스텀 해주면 된다.


3. 최적화
 - 리액트 앱을 최적화 할때는
  1. 기능 완성이 먼저
  2. 그 다음에 최적화를 진행하자
 - 최적화의 대상은 모든것에 최적화를 하면 안되고, 
 최적화가 필요 할꺼 같은 함수, 연산, 컴포넌트 에다가만
 최적화를 적용하자
 - 간단한걸 렌더링 해주는 함수는 최적화를 해주기 보다는
 리렌더링 되는게 빠를 수 있다. 최적화가 되어야 하는 영역에
 대해서만 최적화를 시켜 준다.

4. Context
 - 컴포넌트간의 데이터를 전달하는 또 다른 방법 
 - 기존의 props가 가지고 있는 단점을 해결할 수 있다. 

 4-1. props의 단점
  - App -> Child , props는 부모 -> 자식으로만 데이터를
 전달할 수 있다.
 - 만약 컴포넌트의 구조가 두 단계 이상으로 깊어진다면, 
 App에서 ChildB에게 데이터를 전달할때 props를 다이렉트로
 전달할 수 없고, ChildA라는 컴포넌트가 중간다리 역할을
 해얀한다.  -> Props Drilling

 4-2. Provider
 - Context에 공급할 데이터를 설정하거나, Context에
 공급받을 컴포넌트를 설정하기위해서 사용한다
 - Provider는 사실 컴포넌트이다. 
 <TodoContext.Provider /> 로 사용할 수 있다.
 - TodoContext.Provider로 감싸져 있는 태그는 TodoConext를
 쓰겠다는 의미, 공급할 데이터는 value={}를 사용한다. 

5. 페이지 라우팅
 5-1. 페이지 라우팅이란?
  - 경로에 따라 알맞은 페이지를 렌더링 하는 과정
  - /new -> new 페이지 렌더링

 5-2. MPA
  - Multi Page Application
  - 애초에 서버가 여러개의 페이지를 가지고 있다.
  많은 서비스가 사용하는 전통적인 방식이다. 
  사용법이 직관적 이다. 
  - 단점 : 서버의 부하가 심해진다.
  
 5-3. SPA
  - Single Page Application
  - 다수의 사용자가 접속해도 크게 상관 없다. 
  - 페이지의 이동이 매끄럽고 효율적이다.

 5-4. 결론
  - MPA 방식 : 페이지 이동시 모든 요소 교체
  - SPA 방식 : 필요한 요소만 교체

6. React Code Splitting

7. React children
 - 태그와 태그 사이의 모든 내용을 표시하기 위해 사용하는
 특수한 props

8. <Outlet/>
 - <BasicLayout>에서 기본 틀 잡아주고, 
 <IndexPage>가 2차 메뉴 잡아주고, 
 컴포넌트마다 적용되는 내용은 <Outlet>에 적용된다. 
 - ListPage는 ListPage에 필요한 디자인만 넣으면 된다. 









	todo/list
	todo/add
	todo/read/33
	todo/modify/33









